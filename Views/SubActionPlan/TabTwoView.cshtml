@using System.Globalization
@using Aisger
@model Aisger.Models.SUB_ActionPlan
<style type="text/css">
    .tabPlan2Field {
        width: 100%;
          font-size: 11px;
    }
</style>
<h5 style="font-weight: bold; text-align: center">
    @ResourceSetting.table2
</h5>

<div id="CSSTableGenerator">
    <table id="table_plan2" class="wast-list" style="width: 100%; text-align: center">
        <thead>
            <tr style="font-weight: bold">
                <td rowspan="2">@ResourceSetting.table11</td>
                <td rowspan="2">@ResourceSetting.table22</td>
                <td rowspan="2">@ResourceSetting.table15</td>
                <td colspan="5">@ResourceSetting.table23</td>
                <td colspan="5">@ResourceSetting.table24</td>
                <td rowspan="2">@ResourceSetting.table25</td>
                <td rowspan="2">@ResourceSetting.table26</td>
                <td rowspan="2">@ResourceSetting.table27</td>
            </tr>
            <tr>
                <td id="year1_head2"></td>
                <td id="year2_head2"></td>
                <td id="year3_head2"></td>
                <td id="year4_head2"></td>
                <td id="year5_head2"></td>
                <td id="expend1_head2"></td>
                <td id="expend2_head2"></td>
                <td id="expend3_head2"></td>
                <td id="expend4_head2"></td>
                <td id="expend5_head2"></td>
            </tr>
            <tr style="font-weight: bold">
                @for (int i = 1; i < 17; i++)
                {
                    <td>@i</td>
                }

            </tr>
            @*    <tr style="font-weight: bold">
                    <td colspan="14">Снижение объема потребления энергетических ресурсов на единицу продукции/площади</td>
                </tr>*@
        </thead>
        <tbody id="tab2">
            @for (var i = 0; i < Model.SubFormTab2s.Count; i++)
            {
                var entity = Model.SubFormTab2s[i];
                <tr rowid="@entity.KindId">
                    <td class="disabletd">@entity.SUB_DIC_KindTabTwo.IndexCode</td>
                    <td class="disabletd">@entity.SUB_DIC_KindTabTwo.Name</td>
                    <td><div class="input-group">@Html.TextBoxFor(model => model.SubFormTab2s[i].UnitName, new { @class = "tabPlan2Field form-edit" })<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>
                    <td><div class="input-group">@Html.TextBoxFor(model => model.SubFormTab2s[i].Volume1, new { @class = "tabPlan2Field 2volume_1 form-edit" })<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>
                    <td><div class="input-group">@Html.TextBoxFor(model => model.SubFormTab2s[i].Volume2, new { @class = "tabPlan2Field 2volume_2 form-edit" })<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>
                    <td><div class="input-group">@Html.TextBoxFor(model => model.SubFormTab2s[i].Volume3, new { @class = "tabPlan2Field 2volume_3 form-edit" })<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>
                    <td><div class="input-group">@Html.TextBoxFor(model => model.SubFormTab2s[i].Volume4, new { @class = "tabPlan2Field 2volume_4 form-edit" })<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>
                    <td><div class="input-group">@Html.TextBoxFor(model => model.SubFormTab2s[i].Volume5, new { @class = "tabPlan2Field 2volume_5 form-edit" })<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>
                    <td><div class="input-group">@Html.TextBoxFor(model => model.SubFormTab2s[i].Expend1, new { @class = "tabPlan2Field 2exp_1 form-edit from-float" })<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>
                    <td><div class="input-group">@Html.TextBoxFor(model => model.SubFormTab2s[i].Expend2, new { @class = "tabPlan2Field 2exp_2 form-edit from-float" })<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>
                    <td><div class="input-group">@Html.TextBoxFor(model => model.SubFormTab2s[i].Expend3, new { @class = "tabPlan2Field 2exp_3 form-edit from-float" })<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>
                    <td><div class="input-group">@Html.TextBoxFor(model => model.SubFormTab2s[i].Expend4, new { @class = "tabPlan2Field 2exp_4 form-edit from-float" })<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>
                    <td><div class="input-group">@Html.TextBoxFor(model => model.SubFormTab2s[i].Expend5, new { @class = "tabPlan2Field 2exp_5 form-edit from-float" })<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>
                    <td><div class="input-group">@Html.TextBoxFor(model => model.SubFormTab2s[i].Possible, new { @class = "tabPlan2Field form-edit" })<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>
                    <td><div class="input-group">@Html.TextBoxFor(model => model.SubFormTab2s[i].Potential, new { @class = "tabPlan2Field form-edit" })<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>
                    <td><div class="input-group">@Html.TextBoxFor(model => model.SubFormTab2s[i].Note, new { @class = "tabPlan2Field form-edit" })<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>
                </tr>
            }
        <tfoot>
            <tr style="font-weight: bold" class="sum_row">
                <td colspan="2" class="disabletd">@ResourceSetting.Sum:</td>
                <td class="disabletd">-</td>
                @for (int i = 1; i < 6; i++)
                {
                    var volumeSum = "volumeSum_" + i;
                    <td class="disabletd"><input id="@volumeSum" readonly="readonly" class="form-control volumeAllSum from-float" /></td>
                }
                @for (int i = 1; i < 6; i++)
                {
                    var expSum = "expSum_" + i;
                    <td class="disabletd"><input id="@expSum" readonly="readonly" class="form-control expAllSum from-float" /></td>
                }
                <td class="disabletd">-</td>
                <td class="disabletd">-</td>
                <td class="disabletd">-</td>
            </tr>
            <tr style="font-weight: bold">
                <td colspan="2" class="disabletd">@ResourceSetting.all:</td>
                <td class="disabletd">-</td>
                <td colspan="5" class="disabletd"><input id="2allValume" readonly="readonly" class="form-control from-float" /></td>
                <td colspan="5" class="disabletd"><input id="2allExpend" readonly="readonly" class="form-control from-float" /></td>
                <td class="disabletd">-</td>
                <td class="disabletd">-</td>
                <td class="disabletd">-</td>
            </tr>
        </tfoot>
    </table>
</div>

<script type="text/javascript">


    function calcSumm2() {
        calcColumnType2("2volume");
        calcColumnType2("2exp");

    }
    function calcColumnType2(colm) {
        var allcl = "";
        var allInput = "";
        var maxindex = 0;
        for (var i = 1; i < 6; i++) {
            var sum = 0;
            var className = colm + "_" + i;
            $('.' + className).each(function (index, obj) {
                var val = $(this).val().replace(',', '.');
                val = replaceAll1(' ', '', val);
                if (!isNaN(val) && val.length != 0) {
                    sum += parseFloat(val);
                    if (val.indexOf('.') > 0) {
                        var dec = val.split('.')[1].length;
                        if (dec > maxindex) {
                            maxindex = dec;
                        }
                    }
                }
            });
            var sumColumn = "";


            if (className.indexOf('2volume') > -1) {
                sumColumn = className.replace('2volume', 'volumeSum');
                allcl = "volumeAllSum";
                allInput = "2allValume";
            }
            if (className.indexOf('2exp') > -1) {
                sumColumn = className.replace('2exp', 'expSum');
                allcl = "expAllSum";
                allInput = "2allExpend";
            }
            if (sum > 0) {
                sum = sum.toFixed(maxindex);
                $("#" + sumColumn).val(formatNumber(sum));
            }
        }
        var allSum = 0;
        $('.' + allcl).each(function (index, obj) {
            var val = $(this).val().replace(',', '.');
            val = replaceAll1(' ', '', val);
            if (!isNaN(val) && val.length != 0) {
                allSum += parseFloat(val);
            }
        });

        if (allSum > 0) {
            allSum = allSum.toFixed(maxindex);
            $("#" + allInput).val(formatNumber(allSum));
        }

    }
    function calcColumn2(idColumn) {
        var className = $('#' + idColumn).attr('class').split(' ')[1];
        var sum = 0;
        var maxindex = 0;
        $('.' + className).each(function (index, obj) {
            var val = $(this).val().replace(',', '.');
            val = replaceAll1(' ', '', val);
            if (!isNaN(val) && val.length != 0) {
                if (val.indexOf('.') > 0) {
                    var dec = val.split('.')[1].length;
                    if (dec > maxindex) {
                        maxindex = dec;
                    }
                }
                sum += parseFloat(val);
            }
        });
        var sumColumn = "";
        var allcl = "";
        var allInput = "";
        if (className.indexOf('2volume') > -1) {
            sumColumn = className.replace('2volume', 'volumeSum');
            allcl = "volumeAllSum";
            allInput = "2allValume";
        }
        if (className.indexOf('2exp') > -1) {
            sumColumn = className.replace('2exp', 'expSum');
            allcl = "expAllSum";
            allInput = "2allExpend";
        }
        if (sum > 0) {
            sum = sum.toFixed(maxindex);
            $("#" + sumColumn).val(formatNumber(sum));
        }
        var allSum = 0;
        $('.' + allcl).each(function (index, obj) {
            var val = $(this).val().replace(',', '.');
            val = replaceAll1(' ', '', val);
            if (!isNaN(val) && val.length != 0) {
                allSum += parseFloat(val);
            }
        });

        if (allSum > 0) {
            allSum = allSum.toFixed(maxindex);
            $("#" + allInput).val(formatNumber(allSum));
        }
        // console.log($('#' + idColumn).attr('class'));

    }
    function SetEventFormPlan2(idcontrol) {
        $(idcontrol).change(function () {
            var idAttr = $(this).attr('name');
            var fieldName = idAttr.split('.')[1];
            var type = "string";
            if (fieldName.indexOf("Expend") > -1 || fieldName.indexOf("Volume") > -1 || fieldName.indexOf("Potential") > -1) {
                type = "float";
            }
            var fieldValue = $(this).val();
            if (type == "float") {
                if (fieldValue != null && fieldValue.length > 0) {
                    fieldValue = replaceAll1(' ', '', fieldValue);

                    if (fieldValue.indexOf(',') > 0) {
                        fieldValue = fieldValue.replace(',', '.');

                    }
                    if (fieldValue != '' && !$.isNumeric(fieldValue)) {
                        showWarning('@ResourceSetting.enterNumber');
                        $(this).val("");
                        return;
                    }
                    if (fieldValue.indexOf('-') > -1) {
                        showWarning('@ResourceSetting.enterNumberNotMinus');
                        $(this).val("");
                        return;
                    }
                    $(this).val(formatNumber(fieldValue));
                }
                if (fieldName.indexOf("Expend") > -1 || fieldName.indexOf("Volume") > -1) {
                    calcColumn2($(this).attr('id'));
                }
            }

            var row = $(this).closest('tr');
            var entityId = row.attr('rowid');
            UpdateModel("tab2", entityId, $(this).attr('id'), fieldName, fieldValue, type, 0);
        });
    }
    //bird
    $(document).ready(function () {
        SetEventFormPlan2(".tabPlan2Field");
        calcSumm2();
    });
</script>