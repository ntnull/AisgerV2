@using System.Diagnostics
@using System.Globalization
@using System.Threading
@using Aisger
@using Aisger.Helpers
@model Aisger.Models.EAUDIT_Preamble

<style>
    label {
        padding-top: 5px;
    }
</style>
<link href="@Url.Content("~/Content/select2/select2.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/bootstrap-datetimepicker.css")" rel="stylesheet" type="text/css" />

@using (Html.BeginForm("SavePreambleAsync", "EnergyAudit", FormMethod.Post, new { id = "eauditForm" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend style="padding-top: 10px;">
            @ResourceSetting.tPreamble
        </legend>
        @Html.HiddenFor(model => model.Id, new {id ="hfPreamleId"})

        <fieldset>
            <legend>
                <span style="font-size: 80%;">@Html.DisplayNameFor(model => model.refEauditObject)</span>
            </legend>
            <div class="row">
                @Html.LabelFor(model => model.refEauditObject, new { @class = "col-lg-2" })
                <div class="col-lg-10">
                    @if (Model.IsReadOnly)
                    {
                        @Html.DisplayFor(model => model.EauditObjectName)
                    }
                    else
                    {
                        @Html.TextBoxFor(model => model.refEauditObject, new { id = "refEauditObjectId", style = "width:400px;" })
                        @Html.ValidationMessageFor(model => model.refEauditObject)
                    }
                    @if (Model.SignedEauditPreamble != null)
                    {
                        <div class="signed signed-color">
                            @Model.SignedEauditPreamble.EauditObjectName
                        </div>
                    }
                    @Html.HiddenFor(model => model.EauditObjectBINIINName, new { id = "hfEauditObjectName" })
                    @Html.HiddenFor(model => model.EauditObjectName)
                </div>
            </div>
            <div class="row">
                <label class="col-lg-4">1. @Html.DisplayNameFor(model => model.EauditObjectsFormOfIncorporation):</label>
                <div class="col-lg-8" >
                    <div id="EauditObjectsFormOfIncorporationId">
                        @Html.DisplayFor(model => model.EauditObjectsFormOfIncorporation)
                    </div>
                    @if (Model.SignedEauditPreamble != null)
                    {
                        <div class="signed signed-color">
                            @Model.SignedEauditPreamble.EauditObjectsFormOfIncorporation
                        </div>
                    }
                </div>
                @Html.HiddenFor(model => model.EauditObjectsFormOfIncorporation)
            </div>
            <div class="row">
                <label class="col-lg-4">2. @Html.DisplayNameFor(model => model.EauditObjectAddress):</label>
                <div class="col-lg-8" >
                    <div id="EauditObjectAddressId">
                         @Html.DisplayFor(model => model.EauditObjectAddress)
                    </div>
                    @if (Model.SignedEauditPreamble != null)
                    {
                        <div class="signed signed-color">
                            @Model.SignedEauditPreamble.EauditObjectAddress
                        </div>
                    }
                </div>
                @Html.HiddenFor(model => model.EauditObjectAddress)
            </div>
            <div class="row">
                <label class="col-lg-4">3. @Html.DisplayNameFor(model => model.EauditObjectBankrequisites):</label>
                <div class="col-lg-8" >
                    <div id="EauditObjectBankrequisitesId">
                        @Html.DisplayFor(model => model.EauditObjectBankrequisites)
                    </div>
                    @if (Model.SignedEauditPreamble != null)
                    {
                        <div class="signed signed-color">
                            @Model.SignedEauditPreamble.EauditObjectBankrequisites
                        </div>
                    }
                </div>
                @Html.HiddenFor(model => model.EauditObjectBankrequisites)
            </div>
            <div class="row">
                <label class="col-lg-4">4. @Html.DisplayNameFor(model => model.EauditObjectHead):</label>
                <div class="col-lg-8" >
                    <div id="EauditObjectHeadId">
                        @Html.DisplayFor(model => model.EauditObjectHead)
                    </div>
                    @if (Model.SignedEauditPreamble != null)
                    {
                        <div class="signed signed-color">
                            @Model.SignedEauditPreamble.EauditObjectHead
                        </div>
                    }
                </div>
                @Html.HiddenFor(model => model.EauditObjectHead)
            </div>
        </fieldset>
        <fieldset>
            <legend>
                <span style="font-size: 80%;">@Html.DisplayNameFor(model => model.refAuditor)</span>
            </legend>
            <div class="row">
                @Html.LabelFor(model => model.refAuditor, new { @class = "col-lg-2" })
                <div class="col-lg-10">
                    @if (Model.IsReadOnly)
                    {
                        @Html.DisplayFor(model => model.AuditorName)
                    }
                    else
                    {
                        if (Model.IsCurrentUserAuditor)
                        {
                            @Html.TextBoxFor(model => model.refAuditor, new { id = "refAuditorEditorId", style = "width:400px;", @readonly = "readonly" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.refAuditor, new { id = "refAuditorEditorId", style = "width:400px;", })
                        }
                    }
                    @if (Model.SignedEauditPreamble != null)
                    {
                        <div class="signed signed-color">
                            @Model.SignedEauditPreamble.AuditorName
                        </div>
                    }
                    
                    @Html.HiddenFor(model => model.AuditorBINIINName, new { id = "hfAuditorBINIINName" })
                    @Html.ValidationMessageFor(model => model.refAuditor)
                    @Html.HiddenFor(model => model.AuditorName, new { id = "AuditorName" })
                </div>
            </div>
            <div class="row">
                <label class="col-lg-4">1. @Html.DisplayNameFor(model => model.AuditorFormOfIncorporation):</label>
                <div class="col-lg-8">
                    <div id="AuditorFormOfIncorporationId">
                        @Html.DisplayFor(model => model.AuditorFormOfIncorporation)
                    </div>
                    @if (Model.SignedEauditPreamble != null)
                    {
                        <div class="signed signed-color">
                            @Model.SignedEauditPreamble.AuditorName
                        </div>
                    }
                </div>
                @Html.HiddenFor(model => model.AuditorFormOfIncorporation)
            </div>
            <div class="row">
                <label class="col-lg-4">2. @Html.DisplayNameFor(model => model.AuditorAddress):</label>
                <div class="col-lg-8">
                    <div id="AuditorAddressId">
                        @Html.DisplayFor(model => model.AuditorAddress)
                    </div>
                    @if (Model.SignedEauditPreamble != null)
                    {
                        <div class="signed signed-color">
                            @Model.SignedEauditPreamble.AuditorAddress
                        </div>
                    }
                </div>
                @Html.HiddenFor(model => model.AuditorAddress)
            </div>
            <div class="row">
                <label class="col-lg-4">3. @Html.DisplayNameFor(model => model.AuditorBankrequisites):</label>
                <div class="col-lg-8">
                    <div id="AuditorBankrequisitesId">
                        @Html.DisplayFor(model => model.AuditorBankrequisites)
                    </div>
                    @if (Model.SignedEauditPreamble != null)
                    {
                        <div class="signed signed-color">
                            @Model.SignedEauditPreamble.AuditorBankrequisites
                        </div>
                    }
                </div>
                @Html.HiddenFor(model => model.AuditorBankrequisites)
            </div>
            <div class="row">
                <label class="col-lg-4">4. @Html.DisplayNameFor(model => model.AuditorHead):</label>
                <div class="col-lg-8">
                    <div id="AuditorHeadId">
                        @Html.DisplayFor(model => model.AuditorHead)
                    </div>
                    @if (Model.SignedEauditPreamble != null)
                    {
                        <div class="signed signed-color">
                            @Model.SignedEauditPreamble.AuditorHead
                        </div>
                    }
                </div>
                @Html.HiddenFor(model => model.AuditorHead)
            </div>
        </fieldset>
        
        <div class="row">
            @Html.LabelFor(model => model.ContractNumber, new { @class = "col-lg-2" })
            <div class="col-lg-10">
                @if (Model.IsReadOnly)
                {
                    @Html.DisplayFor(model => model.ContractNumber)
                }
                else
                {
                    @Html.EditorFor(model => model.ContractNumber)
                    @Html.ValidationMessageFor(model => model.ContractNumber)
                }
                @if (Model.SignedEauditPreamble != null)
                {
                    <div class="signed signed-color">
                        @Model.SignedEauditPreamble.ContractNumber
                    </div>
                }
            </div>
        </div>
        <div class="row">
            @Html.LabelFor(model => model.ContractDate, new { @class = "col-lg-2" })
            <div class="col-lg-10">
                @if (Model.IsReadOnly)
                {
                    @Html.DisplayFor(model => model.ContractDate)
                }
                else
                {
                    @Html.TextBox("ContractDate", Model.ContractDate.HasValue ? Model.ContractDate.Value.ToString(new CultureInfo("ru-Ru")) : string.Empty, new { htmlAttributes = new { id = "ContractDate" } })
                    @Html.ValidationMessageFor(model => model.ContractDate)
                }
                @if (Model.SignedEauditPreamble != null)
                {
                    <div class="signed signed-color">
                        @Model.SignedEauditPreamble.ContractDate
                    </div>
                }
            </div>
        </div>
        <div class="row">
            @Html.LabelFor(model => model.FinishDate, new { @class = "col-lg-2" })
            <div class="col-lg-10">
                @if (Model.IsReadOnly)
                {
                    @Html.DisplayFor(model => model.FinishDate)
                }
                else
                {
                    @Html.TextBox("FinishDate", Model.FinishDate.HasValue ?Model.FinishDate.Value.ToString(new CultureInfo("ru-Ru")) : string.Empty, new { htmlAttributes = new { id = "FinishDate" } })
                    @Html.ValidationMessageFor(model => model.FinishDate)
                }
                @if (Model.SignedEauditPreamble != null)
                {
                    <div class="signed signed-color">
                        @Model.SignedEauditPreamble.FinishDate
                    </div>
                }
            </div>
        </div>
        <div class="row">
            @Html.LabelFor(model => model.BaseYear, new { @class = "col-lg-2" })
            <div class="col-lg-10">
                @if (Model.IsReadOnly)
                {
                    @Html.DisplayFor(model => model.BaseYear)
                }
                else
                {
                    @Html.EditorFor(model => model.BaseYear, new { htmlAttributes = new { id = "BaseYearId" } })
                    @Html.ValidationMessageFor(model => model.BaseYear)
                }
                @if (Model.SignedEauditPreamble != null)
                {
                    <div class="signed signed-color">
                        @Model.SignedEauditPreamble.BaseYear
                    </div>
                }
            </div>
        </div>
        <div class="row">
            @Html.LabelFor(model => model.ReportYear, new { @class = "col-lg-2" })
            <div class="col-lg-10">
                @if (Model.IsReadOnly)
                {
                    @Html.DisplayFor(model => model.ReportYear)
                }
                else
                {
                    @Html.EditorFor(model => model.ReportYear, new { htmlAttributes = new { id = "ReportYearId" } })
                    @Html.ValidationMessageFor(model => model.ReportYear)
                }
                @if (Model.SignedEauditPreamble != null)
                {
                    <div class="signed signed-color">
                        @Model.SignedEauditPreamble.ReportYear
                    </div>
                }
            </div>
        </div>

        <p>
            <button type="button" class="btn btn-success btn-lg" onclick="location.href='@Url.Action("Index", "EnergyAudit")'">
                <span class="glyphicon glyphicon-backward" aria-hidden="true"></span> @ResourceSetting.Return
            </button>
            @if (!Model.IsReadOnly)
            {
                <button id="saveBtn" type="button" class="btn btn-success btn-lg pull-right">
                    <i class="glyphicon glyphicon-save" aria-hidden="true"></i> @ResourceSetting.Save
                </button>
            }
        </p>
    </fieldset>
}

@**@
@*<div id="divOwnedFacilityContainer">*@
@*    @{*@
@*        Html.RenderAction("GetOwnedFacilityView", "IndustryAttachment1", new { preambleId = Model.Id });*@
@*    }*@
@*</div>*@

<div id="divFileUploaderContainer">
    @{
        Html.RenderAction("GetFileUploader", "EnergyAudit", new {preambleId = Model.Id});
    }
</div>


<script src="@Url.Content("~/Scripts/select2.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/moment-with-locales.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/bootstrap-datetimepicker.js")" type="text/javascript"></script>

@if (CultureHelper.GetCurrentCulture() == CultureHelper.Ru)
{
    <script src="@Url.Content("~/Scripts/localization/select2_locale_ru.js")" type="text/javascript"></script>
@*    <script src="@Url.Content("~/Scripts/locales/bootstrap-datepicker.ru.js")" type="text/javascript"> </script>*@
    
}
else
{
    <script src="@Url.Content("~/Scripts/localization/select2_locale_kk.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/locales/kk.js")" type="text/javascript"> </script>
}

<script>
    $(document).ready(function () {

        $.notifyDefaults({
            delay: 2500
        });

        $("#ContractDate").datetimepicker({
            locale: '@Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName',
            format: 'DD.MM.YYYY'
            @if (@Model.ContractDate.HasValue)
            {
                <text>
                , defaultDate: '@Model.ContractDate.Value.ToString("yyyy-MM-dd", new CultureInfo("ru-Ru"))'
                </text>
            }
        }).on('dp.change', function (e) {
            var mDate = e.date;
            $('#FinishDate').data('DateTimePicker').minDate(mDate);
        });

        $("#FinishDate").datetimepicker({
            locale: '@Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName',
            format: 'DD.MM.YYYY',
            useCurrent: false
            @if (@Model.FinishDate.HasValue)
            {
                <text>
                , defaultDate: '@Model.FinishDate.Value.ToString("yyyy-MM-dd", new CultureInfo("ru-Ru"))'
                </text>
            }
        });

        var pageSize = 20;
        $("#refEauditObjectId").select2({
            placeholder: '@ResourceSetting.sPartName',
            minimumInputLength: 3,
            allowClear: true,
            ajax: {
                quietMillis: 150,
                url: '@Url.Action("GetEauditorObjectList", "EnergyAudit")',
                dataType: 'jsonp',
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            },
            //formatResult: contractFormatResult,
            //formatSelection: contractFormatSelection
        }).on("change", function (e) {
            var val = e.val;
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetDetailInfo", "EnergyAudit")',
                data: { 'id': val },
                dataType: 'json',
                cache: false,
                success: function (data) {
                    if (data.FormOfIncorporation) {
                        $("#EauditObjectsFormOfIncorporationId").text(data.FormOfIncorporation);
                        $("#EauditObjectsFormOfIncorporation").val(data.FormOfIncorporation);
                    }
                    if (data.Address) {
                        $("#EauditObjectAddressId").text(data.Address);
                        $("#EauditObjectAddress").val(data.Address);
                    }
                    if (data.BankRequisites) {
                        $("#EauditObjectBankrequisitesId").text(data.BankRequisites);
                        $("#EauditObjectBankrequisites").val(data.BankRequisites);
                    }
                    if (data.Head) {
                        $("#EauditObjectHeadId").text(data.Head);
                        $("#EauditObjectHead").val(data.Head);
                    }
                    if (data.Name)
                        $("#EauditObjectName").val(data.Name);
                },
                error: function () {
                    $("#EauditObjectsFormOfIncorporationId").text('');
                    $("#EauditObjectsFormOfIncorporation").val('');
                    $("#EauditObjectAddressId").text('');
                    $("#EauditObjectAddress").val('');
                    $("#EauditObjectBankrequisitesId").text('');
                    $("#EauditObjectBankrequisites").val('');
                    $("#EauditObjectHeadId").text('');
                    $("#EauditObjectHead").val('');
                    $("#EauditObjectName").val('');
                }
            });
        });
        if ($("#hfEauditObjectName").val()) {
            $("#s2id_refEauditObjectId span:first").text($("#hfEauditObjectName").val());
        }

        $("#refAuditorEditorId").select2({
            placeholder: '@ResourceSetting.sPartName',
            minimumInputLength: 3,
            allowClear: true,
            ajax: {
                quietMillis: 150,
                url: '@Url.Action("GetAuditorList", "EnergyAudit")',
                dataType: 'jsonp',
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            },
            //formatResult: contractFormatResult,
            //formatSelection: contractFormatSelection
        }).on("change", function (e) {
            var val = e.val;
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetDetailInfo", "EnergyAudit")',
                data: { 'id': val },
                dataType: 'json',
                cache: false,
                success: function (data) {
                    if (data.FormOfIncorporation) {
                        $("#AuditorFormOfIncorporationId").text(data.FormOfIncorporation);
                        $("#AuditorFormOfIncorporation").val(data.FormOfIncorporation);
                    }
                    if (data.Address) {
                        $("#AuditorAddressId").text(data.Address);
                        $("#AuditorAddress").val(data.Address);
                    }
                    if (data.BankRequisites) {
                        $("#AuditorBankrequisitesId").text(data.BankRequisites);
                        $("#AuditorBankrequisites").val(data.BankRequisites);
                    }
                    if (data.Head) {
                        $("#AuditorHeadId").text(data.Head);
                        $("#AuditorHead").val(data.Head);
                    }
                    if (data.Name)
                        $("#AuditorName").val(data.Name);
                    // if (data.BIN)
                    //     $("#AuditorName").val(data.BIN);
                },
                error: function () {
                    $("#AuditorFormOfIncorporationId").text('');
                    $("#AuditorFormOfIncorporation").val('');
                    $("#AuditorAddressId").text('');
                    $("#AuditorAddress").val('');
                    $("#AuditorBankrequisitesId").text('');
                    $("#AuditorBankrequisites").val('');
                    $("#AuditorHeadId").text('');
                    $("#AuditorHead").val('');
                    $("#AuditorName").val('');

                    $("#AuditorBINIINName").val('');
                }
            });
        });
        if ($("#hfAuditorBINIINName").val()) {
            $("#s2id_refAuditorEditorId span:first").text($("#hfAuditorBINIINName").val());
        }

        $("#saveBtn").click(function () {
            var form = $('#eauditForm');
            var done = false;
            $.ajax({
                type: "POST",
                async: false,
                url: form.attr('action'),
                data: form.serialize(),
                error: function (jqXhr, status, error) {
                    //do something about the error
                    done = false;
                },
                success: function (data, status, jqXhr) {
                    //do something with response
                    done = data.success;
                    $("#hfPreamleId").val(data.formId);

                    $("#refPreambleId").val(data.formId);
                    $("#Id").val(data.formId);

                    if (done) {
                        $.notify({
                            icon: "glyphicon glyphicon-ok-circle",
                            message: "@ResourceSetting.sSaveSuccess",
                        }, {
                            type: 'success'
                        });

                        $("#divOperationContainer").show();
                        window.location.href = '@Url.Action("Edit", "EnergyAudit")?id=' + data.formId;
                    } else {
                        $.notify({
                            icon: "glyphicon glyphicon-remove-circle",
                            message: "@ResourceSetting.sSaveError",
                        }, {
                            type: 'danger'
                        });
                    }
                }
            });
        });

    });
</script>