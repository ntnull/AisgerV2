@using Aisger
@using Aisger.CustomResources
@using Aisger.Models
@using Aisger.Models.Constants
@model Aisger.Models.EauditAttachment2

@Html.HiddenFor(model => model.Preamble.Id, new { id = "refPreambleId" })

<div id="raitingBuilding">
    @if (Model.FieldComments != null)
    {
        foreach (EAUDIT_FieldComments comment in Model.FieldComments)
        {
            @Html.Hidden(comment.Id.ToString(), comment.Comment, new
            {
                rowId = comment.RowId
                , fieldName = comment.FieldName
                , isError = comment.IsError
                , formCode = comment.FormCode
                , @class = "raiting"
            });
        }
    }
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="center-block">
            <h4 class="text-center">
                @EauditResource.Buildings
            </h4>
        </div>
    </div>
</div>

<div id="CSSTableGenerator">
    <table id="tbIndustryFormB" class="table-center">
        <thead>
            <tr>
                <th>№</th>
                <th>@EauditResource.Name</th>
                <th></th>
            </tr>
            <tr>
                <th>1</th>
                <th>2</th>
                <th></th>
            </tr>
        </thead>
        <tbody id="@EnergyAuditFormConsts.Buildings">
            <tr class="@EnergyAuditFormConsts.Buildings"></tr>
            @{
                int index = 0;
                EAUDIT_Building signedIform = null;
            }
            @foreach (var of in Model.Buildings.OrderBy(ownedf => ownedf.Id))
            {
                if (Model.SignedEauditPreamble != null && Model.SignedEauditPreamble.EAUDIT_Building != null)
                {
                    signedIform = Model.SignedEauditPreamble.EAUDIT_Building.FirstOrDefault(iform => iform.Id == of.Id);
                }
                index = index + 1;
                <tr id="@of.Id" class="@EnergyAuditFormConsts.Buildings">
                    <td class="disabletd">@index</td>
                    <td>
                        <div class="input-group">
                            @if (Model.IsReadOnly)
                            {
                                <span class="text-display">
                                    @Html.DisplayFor(model => of.Name)
                                </span>
                            }
                            else
                            {
                                @Html.TextBoxFor(model => of.Name, new { @class = "form-edit formBField" })
                                <span class="input-group-addon">
                                    <a class="commentDialog" href="#" tabindex="-1">
                                        <i class="glyphicon glyphicon-info-sign"></i>
                                    </a>
                                </span>
                            }
                            @if (signedIform != null)
                            {
                                <div class="signed signed-color">
                                    @signedIform.Name
                                </div>
                            }
                        </div>
                    </td>
                    <td style="text-align: center">
                        @if (!Model.IsReadOnly)
                        {
                            <i class="glyphicon glyphicon-remove deleteRow" title="@ResourceSetting.Delete"></i>
                        }
                    </td>
                </tr>
            }
            <tr>
                <td colspan="3" style="text-align: left;">
                    @if (!Model.IsReadOnly)
                    {
                        <button type="button" class="btn btn-info btn-sm" id="btnAddNewFormB">
                            <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                        </button>
                    }
                </td>
            </tr>
        </tbody>
    </table>
</div>

<table id="tbFormBRowTemplate" class="hidden">
    <tr class="@EnergyAuditFormConsts.Buildings">
        <td class="disabletd">
            <span class="ordern"></span>
        </td>
        <td>
            <div class="input-group">
                @Html.TextBoxFor(model => model.Buildings.FirstOrDefault().Name, new { @class = "form-edit formBField", @Value = "" })
                <span class="input-group-addon">
                    <a class="commentDialog" href="#" tabindex="-1">
                        <i class="glyphicon glyphicon-info-sign"></i>
                    </a>
                </span>
            </div>
        </td>
        <td style="text-align: center">
            <i class="glyphicon glyphicon-remove deleteRow" title="@ResourceSetting.Delete"></i>
        </td>
    </tr>
</table>

<script>
    var IndustryFormB = {
        SaveOrUpdateFormFn: function (form, row, urlParam) {
            $.ajax({
                type: "POST",
                url: urlParam,
                data: form,
                dataType: 'json',
                cache: false,
                success: function (data) {
                    if (data.IsSuccess) {
                        $(row).attr("id", data.Id);
                    }
                },
            });
        },
        DeleteFormFn: function (rowId, urlParam, formCode) {
            $.ajax({
                type: "POST",
                url: urlParam,
                data: { id: rowId, buildingFormCode: formCode },
                dataType: 'json',
                cache: false,
                success: function (data) {
                },
            });
        },
        init: function () {
            if (window.EAuditGeneral)
                window.EAuditGeneral.init("tbIndustryFormB");

            $("table .formBField").blur(function () {
                IndustryFormB.onBlurFieldFn(this, '@Url.Action("UpdateBuilding", "BuildingAttachment2")', "formBField");
            });

            $("#btnAddNewFormB").click(function () {
                IndustryFormB.addNewRowFn("@EnergyAuditFormConsts.Buildings"
                    , "tbFormBRowTemplate", "tbIndustryFormB", "formBField",
                    '@Url.Action("UpdateBuilding", "BuildingAttachment2")');
            });

            $("#tbIndustryFormB").on("click", ".deleteRow", function () {
                IndustryFormB.deleteRowFn($(this), '@Url.Action("Delete", "BuildingAttachment2")', '@EnergyAuditFormConsts.Buildings');
            });
        },
        serializeFormFn: function (row, fieldClass) {
            var formOf = {};
            var refPreamble = $("#refPreambleId").val();
            formOf.refPreamble = refPreamble;
            var id = row.attr("id");
            formOf.Id = id;
            row.find("." + fieldClass).each(function () {
                var name = $(this).attr("name");
                if (name.indexOf('.') > -1) {
                    var nameArr = name.split('.');
                    name = nameArr[nameArr.length - 1];
                }
                formOf[name] = $(this).val().replace('.', ',');
            });

            return formOf;
        },
        addNewRowFn: function (className, templateId, mainTableId, fieldClass, urlParam) {
            var row = $("#" + templateId + " tbody").html();
            //row = $(row).addClass(className);
            var lastRow = $("#" + mainTableId + " tr." + className).last();
            var rowCount = $("#" + mainTableId + " tr." + className).length + 1;
            debugger;
            var rowElement = $.parseHTML(row);
            $(rowElement).find(".ordern").text(rowCount);
            $("." + fieldClass, rowElement).blur(function () {
                IndustryFormB.onBlurFieldFn(this, urlParam, fieldClass);
            });

            lastRow.after(rowElement);
        },
        deleteRowFn: function (element, urlParam, className) {
            var row = $(element).closest('tr');
            var success = function () {
                var entityId = row.attr('id');
                if (entityId)
                    IndustryFormB.DeleteFormFn(entityId
                        , urlParam
                        , className);
                row.remove();
            }
            var cancel = function () {

            };
            showConfirmation("@ResourceSetting.Delete", "@ResourceSetting.deleteconfirm", success, cancel);
        },
        changeRowSpanHelperFn: function (row, value) {

        },
        onBlurFieldFn: function (element, urlParam, fieldClass) {
            debugger;
            var row = $(element).closest("tr");
            var form = IndustryFormB.serializeFormFn(row, fieldClass);
            if (form.refPreamble) {
                IndustryFormB.SaveOrUpdateFormFn(form, row, urlParam);
            }
        }
    };
</script>