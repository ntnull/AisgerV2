@using System.Globalization
@using Aisger
@using Aisger.Helpers
@model Aisger.Models.Entity.Subject.Sub_FormGu
<style type="text/css">
    .form5Field {
        width: 100%;
    }

    .ui-datepicker-calendar {
        display: none;
    }


    .form3Field {
        width: 100%;
        text-align: right;
    }

    .form3gu-checkbox-central {
        width: 13px;
        vertical-align: middle;
        display: inline;
    }

    .form3gu-checkbox-independent {
        width: 13px;
        vertical-align: middle;
        display: inline;
    }

    .row-padding {
        padding-top: 10px;
    }

    .form3gu-input {
        width: 120px;
        display: inline-block;
    }

    .form3gu-textarea {
        height: 55px;
    }
</style>
<link href="@Url.Content("~/Content/select2/select2.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/custom/typeahead.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/custom/typeahead.js-bootstrap.css")" rel="stylesheet" type="text/css" />

<div style="display: none" id="normDivContent">
    <select id="norm" style="width: 100%" class="populate select2-offscreen form-edit">
        <option value="0"></option>
        @foreach (var item in Model.SubDicEnergyindicatorList)
        {
            @Html.Partial("~/Views/RegisterForm/ChildrensGu.cshtml", item)
        }
    </select>
</div>
@if (CultureHelper.GetCurrentCulture() == "kz")
{
    <div>
        <h5 style="font-weight: bold; text-align: center;margin-top:15px;width:70%;margin-left:15%;">
            Информация о расходах энергетических ресурсов на отопление на единицу площади зданий,
            строений, сооружений, информация о мероприятиях по энергосбережению и повышению
            энергоэффективности за @Model.ReportYear календарный год
        </h5>
    </div>
}
else
{
    <div>
        <h5 style="font-weight: bold; text-align: center;margin-top:15px;width:70%;margin-left:15%;">
            Информация о расходах энергетических ресурсов на отопление на единицу площади зданий,
            строений, сооружений, информация о мероприятиях по энергосбережению и повышению
            энергоэффективности за @Model.ReportYear календарный год
        </h5>
    </div>
}
<div id="CSSTableGenerator">
    <input type="hidden" class="sub-form3gu" value="@Model.SUB_Form3Gu.Id" />
    <div class="row row-padding">
        <div class="col-lg-6">
            @Html.TextBoxFor(model => model.SUB_Form3Gu.YearOfConstruction, new { @class = "form3gu-input", fieldName = "YearOfConstruction", @style = "text-align: left;    vertical-align: middle;", @placeholder = "2018;...;" })<span> - Год постройки*</span>
        </div>
        <div class="col-lg-6">
            @Html.TextBoxFor(model => model.SUB_Form3Gu.TotalAreaOfBuilding, new { @class = "form3gu-input", fieldName = "TotalAreaOfBuilding" }) - Общая площадь субъекта ГЭР, м2**
        </div>
    </div>
    <div class="row row-padding">
        <div class="col-lg-6">
            @*@Html.TextBoxFor(model => model.SUB_Form3Gu.AutomateItem, new { @class = "form3gu-input", fieldName = "AutomateItem" }) - Наличие Автоматизированного теплового пункта*@
            @Html.DropDownListFor(model => model.SUB_Form3Gu.AutomateItem, (IEnumerable<SelectListItem>)(ViewData["Forma3GuAutomateItems"]), new { @style = "width: 120px;    display: -webkit-inline-box;", @class = "formgu3-AutomateItem form3gu-input", fieldName = "AutomateItem" }) - Наличие Автоматизированного теплового пункта
        </div>
        <div class="col-lg-6">
            @Html.TextBoxFor(model => model.SUB_Form3Gu.HeatedAreaOfBuilding, new { @class = "form3gu-input", fieldName = "HeatedAreaOfBuilding" }) - Отапливаемая площадь субъекта ГЭР, м2
        </div>
    </div>
    <div class="row row-padding" style="margin-top:20px;">
        <div class="col-lg-12">
            <h5>Вид отопления</h5>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            @{
                var centralH = "";
                var independentH = "";
                if (Model.SUB_Form3Gu.CentralHeating == 1)
                {
                    centralH = "checked";
                }

                if (Model.SUB_Form3Gu.IndependentHeating == 1)
                {
                    independentH = "checked";
                }
            }
            <table style="border-color:white !important;">
                <tr>
                    <td style="border-left:0px;">
                        <input type="checkbox" class="form3gu-checkbox-central" @centralH /> - центральное отопление
                    </td>
                </tr>
                <tr>
                    <td style="border-left:0px;">
                        <input type="checkbox" class="form3gu-checkbox-independent" @independentH /> - автономное отопление
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <div class="row row-padding" style="margin-top:20px;">
        <div class="col-lg-12">
            <h5>Наименование субъекта Государственного энергетического реестра:<i>@Model.SEC_User1.JuridicalName</i></h5>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <table id="table5" class="wast-list" style="width: 100%; text-align: center">
                <thead>
                    <tr style="font-weight: bold">
                        <td>№ </td>
                        <td>@ResourceSetting.form51Gu</td>
                        <td>@ResourceSetting.form54Gu</td>
                        <td>@ResourceSetting.form55</td>
                        <td>@ResourceSetting.form56</td>
                        <td rowspan="2"></td>
                    </tr>
                    <tr style="font-style: italic;font-weight: bold">
                        @{
                            int count = 6;
                            var url = HttpContext.Current.Request.Url.LocalPath;
                            for (int i = 1; i < count; i++)
                            {
                                <td>@i</td>
                            }
                        }
                    </tr>

                </thead>
                <tbody id="form5">
                    @{
                        Aisger.Models.SUB_Form5Record signedObj = null;
                    }
                    @for (var i = 0; i < Model.SubForm5Records.Count; i++)
                    {
                        if (Model.SignedSubForm != null)
                        {
                            var id = Model.SubForm5Records[i].Id;
                            signedObj = Model.SignedSubForm.SUB_Form5Record.FirstOrDefault(f => f.Id == id);
                        }
                        var index = i + 1;
                        var energyindicatorId = "SubForm5Records_" + i + "__energyindicator_id";
                        <tr rowid="@Model.SubForm5Records[i].Id" rowindex="@index" rowkind="1">
                            <td class="disabletd">@index</td>
                            <td>
                                <div class="input-group">
                                    <div class="norm-select" selectid="@Model.SubForm5Records[i].energyindicator_id " controlid="@energyindicatorId"></div>
                                    <span class="input-group-addon">
                                        <a class="commentDialog" href="#">
                                            <i class="glyphicon glyphicon-info-sign"></i>
                                        </a>
                                    </span>
                                </div>
                                @if (signedObj != null)
                                {
                                    <div class="signed signed-color">
                                        @signedObj.energyindicator_id
                                    </div>
                                }
                            </td>
                            <td>
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.SubForm5Records[i].UnitMeasure, new { @class = "form5Field  form-edit unitMeasure-disabled" })
                                    <span class="input-group-addon">
                                        <a class="commentDialog" href="#">
                                            <i class="glyphicon glyphicon-info-sign"></i>
                                        </a>
                                    </span>
                                </div>
                                @if (signedObj != null)
                                {
                                    <div class="signed signed-color">
                                        @signedObj.UnitMeasure
                                    </div>
                                }
                            </td>
                            <td>
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.SubForm5Records[i].CalcFormula, new { @class = "form5Field  form-edit" })
                                    <span class="input-group-addon">
                                        <a class="commentDialog" href="#">
                                            <i class="glyphicon glyphicon-info-sign"></i>
                                        </a>
                                    </span>
                                </div>
                                @if (signedObj != null)
                                {
                                    <div class="signed signed-color">
                                        @signedObj.CalcFormula
                                    </div>
                                }
                            </td>
                            <td>
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.SubForm5Records[i].EnergyValue, new { @class = "form5Field  form-edit from-float" })
                                    <span class="input-group-addon">
                                        <a class="commentDialog" href="#">
                                            <i class="glyphicon glyphicon-info-sign"></i>
                                        </a>
                                    </span>
                                </div>
                                @if (signedObj != null)
                                {
                                    <div class="signed signed-color">
                                        @signedObj.EnergyValue
                                    </div>
                                }
                            </td>
                            @if (i == 0)
                            {
                                <td><a class="deleteRow"></a></td>
                            }
                            else
                            {
                                <td>
                                    <i class="glyphicon glyphicon-remove deleteRow" title="@ResourceSetting.Delete"></i>
                                </td>
                            }
                        </tr>

                    }
                    <tr>
                        <td colspan="5" style="text-align: left;">

                            <button type="button" class="btn btn-success btn-sm add-btn-from5" id="addTable5">
                                <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>@ResourceSetting.addNew
                            </button>

                        </td>
                    </tr>

                    <tr>
                        <td colspan="9" style="text-align: left;" class="disabletd">
                            <h5 style="font-weight: bold; padding-left: 20px">@ResourceSetting.Other</h5>
                        </td>
                    </tr>
                    @for (var i = 0; i < Model.SubForm5RecordsOther.Count; i++)
                    {
                        if (Model.SignedSubForm != null)
                        {
                            var id = Model.SubForm5RecordsOther[i].Id;
                            signedObj = Model.SignedSubForm.SUB_Form5Record.FirstOrDefault(f => f.Id == id);
                        }
                        var index = i + 1;
                        var normId = "SubForm5RecordsOther_" + i + "__energyindicator_id";
                        <tr rowid="@Model.SubForm5RecordsOther[i].Id" rowindex="@index" rowkind="2">
                            <td class="disabletd">@index</td>
                            <td>
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.SubForm5RecordsOther[i].IndicatorName, new { @class = "form5Field   form-edit" })
                                    <span class="input-group-addon">
                                        <a class="commentDialog" href="#">
                                            <i class="glyphicon glyphicon-info-sign"></i>
                                        </a>
                                    </span>
                                </div>
                                @if (signedObj != null)
                                {
                                    <div class="signed signed-color">
                                        @signedObj.IndicatorName
                                    </div>
                                }
                            </td>
                            <td>
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.SubForm5RecordsOther[i].UnitMeasure, new { @class = "form5Field  form-edit" })
                                    <span class="input-group-addon">
                                        <a class="commentDialog" href="#">
                                            <i class="glyphicon glyphicon-info-sign"></i>
                                        </a>
                                    </span>
                                </div>
                                @if (signedObj != null)
                                {
                                    <div class="signed signed-color">
                                        @signedObj.UnitMeasure
                                    </div>
                                }
                            </td>
                            <td>
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.SubForm5RecordsOther[i].CalcFormula, new { @class = "form5Field  form-edit" })
                                    <span class="input-group-addon">
                                        <a class="commentDialog" href="#">
                                            <i class="glyphicon glyphicon-info-sign"></i>
                                        </a>
                                    </span>
                                </div>
                                @if (signedObj != null)
                                {
                                    <div class="signed signed-color">
                                        @signedObj.CalcFormula
                                    </div>
                                }
                            </td>
                            <td>
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.SubForm5RecordsOther[i].EnergyValue, new { @class = "form5Field  form-edit from-float" })
                                    <span class="input-group-addon">
                                        <a class="commentDialog" href="#">
                                            <i class="glyphicon glyphicon-info-sign"></i>
                                        </a>
                                    </span>
                                </div>
                                @if (signedObj != null)
                                {
                                    <div class="signed signed-color">
                                        @signedObj.EnergyValue
                                    </div>
                                }
                            </td>
                            @if (i == 0)
                            {
                                <td><a class="deleteRow"></a></td>
                            }
                            else
                            {
                                <td>
                                    <i class="glyphicon glyphicon-remove deleteRow" title="@ResourceSetting.Delete"></i>
                                </td>
                            }
                        </tr>

                    }
                    <tr>
                        <td colspan="5" style="text-align: left;">

                            <button type="button" class="btn btn-success btn-sm add-btn-from5" id="addTable51">
                                <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>@ResourceSetting.addNew
                            </button>

                        </td>
                    </tr>
                </tbody>
                <tfoot id="foodForm5">

                </tfoot>
            </table>
        </div>
    </div>
</div>
<div style="font-size: 11px; font-style: italic; margin-top: 20px; margin-bottom: 30px">
    @if (CultureHelper.GetCurrentCulture() == "kz")
    {
        <div>
            <p style="font-weight: bold">* Ескертпе: </p>
            * в пункте «год постройки» укзать год постройки самого раннего сооружения.<br>
            в пункте  «общая площадь субъекта ГЭР», в случае нескольких зданий то следует указывать общую суммарную площадь<br>
        </div>
    }
    else
    {
        <div>
            <p style="font-weight: bold">* Примечание: </p>
            * в пункте «год постройки» укзать год постройки самого раннего сооружения.<br>
            в пункте  «общая площадь субъекта ГЭР», в случае нескольких зданий то следует указывать общую суммарную площадь<br>
        </div>
    }
</div>


<script src="@Url.Content("~/Scripts/select2.js")" type="text/javascript"></script>
@if (CultureHelper.GetCurrentCulture() == "ru")
{
    <script src="@Url.Content("~/Scripts/localization/select2_locale_ru.js")" type="text/javascript"></script>
}
else
{
    <script src="@Url.Content("~/Scripts/localization/select2_locale_kk.js")" type="text/javascript"></script>

}
<script src="@Url.Content("~/Scripts/typeahead.min.js")" type="text/javascript"></script>
<script type="text/javascript">

    function SetEventForm5(idcontrol) {
    	$(idcontrol).change(function () {


    	    var fieldValue=$(this).val();
            var idAttr = $(this).attr('name');
            var fieldName = idAttr.split('.')[1];

            var type = "string";
            if (fieldName == "EnergyValue") {
                type = "float";
            }

            if (type == "float") {
                if (fieldValue != null && fieldValue.length > 0) {
                    if (fieldValue.indexOf(',') > 0) {
                        fieldValue = fieldValue.replace(',', '.');
                    }
                    if (fieldValue != '' && !$.isNumeric(fieldValue)) {
                        showWarning('@ResourceSetting.enterNumber');
                        $(this).val("");
                        return false;
                    }
                    if (fieldValue.indexOf('-') > -1) {
                        showWarning('@ResourceSetting.enterNumberNotMinus');
                        $(this).val("");
                        return false;
                    }
                }
            }

            var row = $(this).closest('tr');
            var entityId = row.attr('rowid');
            UpdateModel("form5", entityId, $(this).attr('id'), idAttr.replace('.', '_'), fieldValue, type, 0);
        });
    }
    //bird
	$(document).ready(function () {

	    $('.unitMeasure-disabled').attr("disabled", true);
		if (window.location.href.indexOf('AppForm') < 0) {
			$('.column-hide').hide();
		} else {

			if (window.location.href.indexOf('ShowDetails') < 0)
				$('.column-hide').hide();
		}


	    //----
		$('.form3gu-checkbox-central').change(function () {

		    var val = 0;
		    if ($(this).is(":checked")) {
		        //$(this).attr("checked", true);
		        val = 1;
		    } else val = 0;

		    FormGu3UpdateModel('CentralHeating', val);
		});

		$('.form3gu-checkbox-independent').change(function () {
		    var val = 0;

		    if ($(this).is(":checked")) val = 1;
		    else val = 0;

		    FormGu3UpdateModel('IndependentHeating', val);
		});

		function FormGu3UpdateModel(fieldName, fieldValue) {

		    var modelId = parseInt($("#currentDataViewId").val(), 10) || 0;
		    var year = $("#ReportYear").val();
		    var userId = $("#UserId").val();
		    var editorId = $("#Editor").val();
		    if (modelId == 0) {
		        window.Showbusy(this);
		    }
		    var recordId = $('.sub-form3gu').val();

		    //----
		    $.post('@Url.Action("UpdateModel")', {
		        'code': 'form3Gu', 'modelId': modelId, 'userId': userId, 'editorId': editorId, 'recordId': recordId, 'year': year, 'fieldName': fieldName, 'fieldValue': fieldValue, 'typeId': 0
		    }, function (data) {

		        if (modelId == 0) {
		            $("#currentDataViewId").val(data.formId);
		            $("#loading").hide();
		        }

		        $('.sub-form3gu').val(data.fromRecordId);

		    });
		}


        $('.norm-select').each(function () {
            var idcontrol = $(this).attr('controlid');
            var selectid = $(this).attr('selectid');
            var normDiv = $("#norm").clone();
            normDiv.attr('id', idcontrol);

            $(this).append(normDiv);
            $("#" + idcontrol).select2().select2("val", selectid).on("change", function (e) {
                var val = e.val;
                if (val == null) {
                    return false;
                }
                var row = $(this).closest('tr');
                var entityId = row.attr('rowid');
                var unitId = idcontrol.replace("energyindicator_id", "UnitMeasure");
                $("#" + unitId).val($("#" + idcontrol).find(":selected").attr('unit'));
                var columnhide = row.find('.column-hide');
                columnhide.text($("#" + idcontrol).find(":selected").attr('rate'));

                UpdateModel("form5", entityId, $(this).attr('id'), "energyindicator_id", val, "long", 0);

            });

            $('#' + idcontrol).val((parseInt(selectid)).toString()).change();
        });

        SetEventForm5(".form5Field");
        var counterTable5 = 0;
        $(".add-btn-from5").on("click", function () {
            var row = $(this).closest("tr").prev();
            var rowindex = parseInt(row.attr('rowindex'), 10) || 0;
            var nextIndex = rowindex + 1;
            var kindObject = "";
            if ($(this).attr('id') == "addTable5") {
                kindObject = "SubForm5Records";
            } else {
                kindObject = "SubForm5RecordsOther";
            }

            var cols = '<tr rowid="0" rowindex="' + nextIndex + '">';
            var idIndicatorName = "IndicatorName_" + nextIndex;
            var idNormEnergy = "energyindicator_id_" + nextIndex;
            var divNormEnergy = "NormEnergyDiv_" + nextIndex;
            var idRegularStandart = "RegularStandart_" + nextIndex;
            var idUnitMeasure = "UnitMeasure_" + nextIndex;
            var idCalcFormula = "CalcFormula_" + nextIndex;
            var idEnergyValue = "EnergyValue_" + nextIndex;
            cols += '<td class="disabletd">' + nextIndex + '</td>';
            var normDiv = document.getElementById("normDivContent");
            var envetStr = '<div class="norm-select" selectid="0" id="' + divNormEnergy + '">' + normDiv.innerHTML+ '</div>';

            if ($(this).attr('id') == "addTable5") {
                cols += '<td><div class="input-group">' + envetStr + '<span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>';

            } else {
                cols += '<td><div class="input-group"><input type="text" name="SubForm5RecordsOther[' + nextIndex + '].IndicatorName" id="' + idIndicatorName + '" class="form5Field  form-edit"/><span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>';
            }

            cols += '<td class="disabletd column-hide"></td>';
            cols += '<td><div class="input-group"><input type="text" name="' + kindObject + '[' + nextIndex + '].UnitMeasure" id="' + idUnitMeasure + '" class="form5Field  form-edit" /><span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>';
            cols += '<td><div class="input-group"><input type="text" name="' + kindObject + '[' + nextIndex + '].CalcFormula" id="' + idCalcFormula + '" class="form5Field  form-edit" /><span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>';
            cols += '<td><div class="input-group"><input type="text" name="' + kindObject + '[' + nextIndex + '].EnergyValue" id="' + idEnergyValue + '" class="form5Field  form-edit from-float" /><span class="input-group-addon"><a class="commentDialog" href="#"><i class="glyphicon glyphicon-info-sign"></i></a></span></div></td>';

            cols += '<td><i class="glyphicon glyphicon-remove deleteRow"  title="@ResourceSetting.Delete"></td>';
            cols += '</tr>';
            //            console.log(cols);
            row.after(cols);

            var normDiv1 = $("#norm").clone();
            normDiv1.attr('id', idNormEnergy);
            $('#' + divNormEnergy).append(normDiv1);
            $("#" + idNormEnergy).select2().on("change", function (e) {
                var val = e.val;
                var row = $(this).closest('tr');
                var entityId = row.attr('rowid');
                var unitId = idNormEnergy.replace("energyindicator_id", "UnitMeasure");
                $("#" + unitId).val($("#" + idNormEnergy).find(":selected").attr('unit'));
                var columnhide = row.find('.column-hide');
                columnhide.text($("#" + idNormEnergy).find(":selected").attr('rate'));
                UpdateModel("form5", entityId, $(this).attr('id'), "energyindicator_id", val, "long", 0);

            });

            SetEventForm5("#" + idIndicatorName);
            SetEventForm5("#" + idUnitMeasure);
            SetEventForm5("#" + idCalcFormula);
            SetEventForm5("#" + idEnergyValue);
            if (window.location.href.indexOf('AppForm') < 0) {
                $('.column-hide').hide();

            }
            counterTable5++;
        });

        $("#table5").on("click", ".deleteRow", function () {

            var row = $(this).closest('tr');
            var success = function () {

                var entityId = row.attr('rowid');
                DeleteRecord("form5", entityId);
                row.remove();
                counterTable5 -= 1;
                $('#addTable5').attr('disabled', false).prop('value', "Добавить");
            }
            var cancel = function () {
            };
            showConfirmation('@ResourceSetting.Delete', '@ResourceSetting.deleteconfirm', success, cancel);
        });



	    //----
	    //----form2gu
	    $(".form3gu-input").change(function () {

	        var code = "form3Gu";
	        var fieldName = $(this).attr('fieldName');
	        var fieldValue = $(this).val();
	        var recordId = $('.sub-form3gu').val();

	        var type = "long";
	        if (fieldName == 'TotalAreaOfBuilding' || fieldName == 'HeatedAreaOfBuilding') {
	            type = "float";
	        }

	        if (fieldName == 'YearOfConstruction')
	            type = "string";

	        if (type == "long") {
	            if (fieldValue != null && fieldValue.length > 0) {
	                if (fieldValue.indexOf(',') > 0 || fieldValue.indexOf('.') > 0) {
	                    showWarning("Введите целое число");
	                    $('#SUB_Form3Gu_' + fieldName).val("");
	                    return false;
	                }
	                if (fieldValue != '' && !$.isNumeric(fieldValue)) {
	                    showWarning('@ResourceSetting.sInputNumberRequired');
	                    $('#SUB_Form3Gu_' + fieldName).val("");
	                    return false;
	                }
	                if (fieldValue.indexOf('-') > -1) {
	                    showWarning('@ResourceSetting.enterNumberNotMinus');
	                    $('#SUB_Form3Gu_' + fieldName).val("");
	                    return false;
	                }
	            }
	        }

	        if (type == "float") {
	            if (fieldValue != null && fieldValue.length > 0) {
	                fieldValue = replaceAll1(' ', '', fieldValue);
	                if (fieldValue.indexOf(',') > 0) {
	                    fieldValue = fieldValue.replace(',', '.');
	                }
	                if (fieldValue != '' && !$.isNumeric(fieldValue)) {
	                    showWarning('@ResourceSetting.sInputNumberRequired');
	                    $('#SUB_Form3Gu_' + fieldName).val("");
	                    return false;
	                }
	                if (fieldValue.indexOf('-') > -1) {
	                    showWarning('@ResourceSetting.enterNumberNotMinus');
	                    $('#SUB_Form3Gu_' + fieldName).val("");
	                    return false;
	                }
	                // $('#' + fieldId).val(formatNumber(fieldValue));
	            }
	        }

	        if (type == "int") {
	            var vl=parseInt(fieldValue);
	            if (vl < 1500 || vl > 2018) {
	                showWarning('с 1500 по текущий год(2018).');
	                $('#SUB_Form3Gu_' + fieldName).val("");
	            }
	        }

	        var modelId = parseInt($("#currentDataViewId").val(), 10) || 0;
	        var year = $("#ReportYear").val();
	        var userId = $("#UserId").val();
	        var editorId = $("#Editor").val();
	        if (modelId == 0) {
	            window.Showbusy(this);
	        }

	        //----
	        $.post('@Url.Action("UpdateModel")', {
	            'code': code, 'modelId': modelId, 'userId': userId, 'editorId': editorId, 'recordId': recordId, 'year': year, 'fieldName': fieldName, 'fieldValue': fieldValue, 'typeId': 0
	        }, function (data) {

	            console.log("after update=", data);

	            if (modelId == 0) {
	                $("#currentDataViewId").val(data.formId);
	                $("#loading").hide();
	            }

	            $('.sub-form3gu').val(data.fromRecordId);

	        });

	    });
    });
</script>