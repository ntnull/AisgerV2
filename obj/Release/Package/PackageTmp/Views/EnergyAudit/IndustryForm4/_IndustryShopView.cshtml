@using Aisger
@using Aisger.Models
@using Aisger.Models.Constants

@model Aisger.Models.EauditAttachment1

@Html.HiddenFor(model => model.Preamble.Id, new { id = "refPreambleId" })

@foreach (EAUDIT_FieldComments comment in Model.FieldComments)
{
    @Html.Hidden(comment.Id.ToString(), comment.Comment, new
    {
        rowId = comment.RowId
        , fieldName = comment.FieldName
        , isError=comment.IsError
        , formCode=comment.FormCode
        , @class = "raiting"
    });
}

<div class="row">
    <div class="col-lg-12">
        <div class="center-block">
            <h4 class="text-center">
                4. Цех, участок, производство
            </h4>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <div id="sllFormShopIndustry" class="form-inline link-selector">
            <label>
                @ResourceSetting.sReportObject
            </label>
            @*  @Html.DropDownListFor(model => model.RefOwnedFacilities
                , Model.OwnedFacilityOnlyList
                , new { id = "ddlForm4ShopOwnedFacility" }) *@

            @Html.Partial("_SelectLinkList", new Aisger.Models.ControlModels.SelectLinkListModel()
            {
                CurrentLink = Model.RefOwnedFacilities.HasValue ? Model.RefOwnedFacilities.Value.ToString() : null,
                SelectListItems = Model.OwnedFacilityList
            })
        </div>
    </div>
</div>

<div id="CSSTableGenerator">
    <table id="tbIndustryShop" class="table-center">
        <thead>
            <tr>
                <th>№</th>
                <th>@ResourceSetting.Name</th>
                <th>Короткое название</th>
                <th></th>
            </tr>
            <tr>
                <th>1</th>
                <th>2</th>
                <th>3</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr class="@EnergyAuditFormConsts.IndustryForm4Shop"></tr>
            @{
                int index = 0;
                EAUDIT_IndustryForm4_Shop signedIform = null;
            }
            @foreach (var formRow in Model.IndustryForm4ShopRows)
            {
                if (Model.SignedEauditPreamble != null && Model.SignedEauditPreamble.EAUDIT_IndustryForm4_Shop != null)
                {
                    signedIform = Model.SignedEauditPreamble.EAUDIT_IndustryForm4_Shop.FirstOrDefault(iform => iform.Id == formRow.Id);
                }
                index = index + 1;
                <tr id="@formRow.Id" class="@EnergyAuditFormConsts.IndustryForm4Shop">
                    <td class="disabletd">@index</td>
                    <td>
                        <div class="input-group">
                            @if (Model.IsReadOnly)
                            {
                                <span class="text-display">
                                    @Html.DisplayFor(model => formRow.Name)
                                </span>
                            }
                            else
                            {
                                @Html.TextBoxFor(model => formRow.Name, new {@class = "form-edit formShopField"})
                                <span class="input-group-addon">
                                    <a class="commentDialog" href="#">
                                        <i class="glyphicon glyphicon-info-sign"></i>
                                    </a>
                                </span>
                            }
                            @if (signedIform != null)
                            {
                                <div class="signed signed-color">
                                    @signedIform.Name
                                </div>
                            }
                        </div>
                    </td>
                    <td>
                        <div class="input-group">
                            @if (Model.IsReadOnly)
                            {
                                <span class="text-display">
                                    @Html.DisplayFor(model => formRow.ShortName)
                                </span>
                            }
                            else
                            {
                                @Html.TextBoxFor(model => formRow.ShortName, new {@class = "form-edit formShopField"})
                                <span class="input-group-addon">
                                    <a class="commentDialog" href="#">
                                        <i class="glyphicon glyphicon-info-sign"></i>
                                    </a>
                                </span>
                            }
                            @if (signedIform != null)
                            {
                                <div class="signed signed-color">
                                    @signedIform.ShortName
                                </div>
                            }
                        </div>
                    </td>
                    <td style="text-align: center">
                        @if (!Model.IsReadOnly)
                        {
                            <i class="glyphicon glyphicon-remove deleteRow" title="@ResourceSetting.Delete"></i>
                        }
                    </td>
                </tr>
            }
            <tr>
                <td colspan="9" style="text-align: left;">
                    @if (!Model.IsReadOnly)
                    {
                        <button type="button" class="btn btn-info btn-sm" id="btnAddNewFormShopRow">
                            <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                        </button>
                    }
                </td>
            </tr>
        </tbody>
    </table>
</div>

<table id="tbShopRowTemplate" class="hidden">
    <tr class="@EnergyAuditFormConsts.IndustryForm4Shop">
        <td class="disabletd">
            <span class="ordern"></span>
        </td>
        <td>
            <!--2-->
            <div class="input-group">
                @Html.TextBoxFor(model => model.IndustryForm4ShopRows.FirstOrDefault().Name, new { @class = "form-edit formShopField", @Value = "" })
                <span class="input-group-addon">
                    <a class="commentDialog" href="#">
                        <i class="glyphicon glyphicon-info-sign"></i>
                    </a>
                </span>
            </div>
        </td>
        <td>
            <!--2-->
            <div class="input-group">
                @Html.TextBoxFor(model => model.IndustryForm4ShopRows.FirstOrDefault().ShortName, new { @class = "form-edit formShopField", @Value = "" })
                <span class="input-group-addon">
                    <a class="commentDialog" href="#">
                        <i class="glyphicon glyphicon-info-sign"></i>
                    </a>
                </span>
            </div>
        </td>
        <td style="text-align: center">
            <i class="glyphicon glyphicon-remove deleteRow" title="@ResourceSetting.Delete"></i>
        </td>
    </tr>
</table>

<script>
    var IndustryFormShop = {
        SaveOrUpdateFormFn: function (form, row, urlParam) {
            $.ajax({
                type: "POST",
                url: urlParam,
                data: form,
                dataType: 'json',
                cache: false,
                success: function (data) {
                    if (data.IsSuccess) {
                        $(row).attr("id", data.Id);
                    }
                },
            });
        },
        DeleteFormFn: function (rowId, urlParam, formCode) {
            $.ajax({
                type: "POST",
                url: urlParam,
                data: { id: rowId, industryFormCode: formCode },
                dataType: 'json',
                cache: false,
                success: function (data) {
                },
            });
        },
        init: function () {
            if (window.EAuditGeneral) {
                EAuditGeneral.msgFieldMustBeDigit = '@ResourceSetting.sInputNumberRequired';
                EAuditGeneral.tTitle = '@ResourceSetting.sComment';
                EAuditGeneral.sSave = '@ResourceSetting.Save';
                window.EAuditGeneral.init("tbIndustryShop");
            }

            $("table .formShopField").blur(function () {
                IndustryFormShop.onBlurFieldFn(this, '@Url.Action("UpdateShop", "IndustryAttachment1")', "formShopField");
            });

            $("#btnAddNewFormShopRow").click(function () {
                IndustryFormShop.addNewRowFn("@EnergyAuditFormConsts.IndustryForm4Shop"
                    , "tbShopRowTemplate", "tbIndustryShop", "formShopField",
                    '@Url.Action("UpdateShop", "IndustryAttachment1")');
            });

            $("#tbIndustryShop").on("click", ".deleteRow", function () {
                IndustryFormShop.deleteRowFn($(this), '@Url.Action("Delete", "IndustryAttachment1")', '@EnergyAuditFormConsts.IndustryForm4Shop');
            });

            $('#ddlForm4ShopOwnedFacility').change(function () {
                var refOwnedFacility = $(this).val();
                var refPreamble = $("#refPreambleId").val();
                window.EnergyAuditParentForm.reloadFormShop(refPreamble, refOwnedFacility);
            });

            $('.link-selector-item').click(function () {
                var refOwnedFacility = $(this).attr('value');
                var refPreamble = $("#refPreambleId").val();
                window.EnergyAuditParentForm.reloadFormShop(refPreamble, refOwnedFacility);
            });
        },
        serializeFormFn: function (row, fieldClass) {
            var form = {};
            var refPreamble = $("#refPreambleId").val();
            form.refPreamble = refPreamble;
            var id = row.attr("id");
            form.Id = id;
            //form.refOwnedFacility = $("#ddlForm4ShopOwnedFacility").val();
            form.refOwnedFacility = $("#sllFormShopIndustry").children(".link-selector-item.selected").attr('value');

            row.find("." + fieldClass).each(function () {
                var name = $(this).attr("name");
                if (name.indexOf('.') > -1) {
                    var nameArr = name.split('.');
                    name = nameArr[nameArr.length - 1];
                }
                form[name] = $(this).val().replace('.', ',');
            });

            return form;
        },
        addNewRowFn: function (className, templateId, mainTableId, fieldClass, urlParam) {
            var row = $("#" + templateId + " tbody").html();
            //row = $(row).addClass(className);
            var lastRow = $("#" + mainTableId + " tr." + className).last();
            var rowCount = $("#" + mainTableId + " tr." + className).length;

            var rowElement = $.parseHTML(row);
            $(rowElement).find(".ordern").text(rowCount);
            $("." + fieldClass, rowElement).blur(function () {
                IndustryFormShop.onBlurFieldFn(this, urlParam, fieldClass);
            });

            lastRow.after(rowElement);
        },
        deleteRowFn: function (element, urlParam, className) {
            var row = $(element).closest('tr');
            var success = function () {
                var entityId = row.attr('id');
                if (entityId)
                    IndustryFormShop.DeleteFormFn(entityId
                        , urlParam
                        , className);
                row.remove();
            }
            var cancel = function () {

            };
            showConfirmation("@ResourceSetting.Delete", "@ResourceSetting.deleteconfirm", success, cancel);
        },
        changeRowSpanHelperFn: function (row, value) {

        },
        onBlurFieldFn: function (element, urlParam, fieldClass) {
            var row = $(element).closest("tr");
            var form = IndustryFormShop.serializeFormFn(row, fieldClass);
            if (form.refPreamble) {
                IndustryFormShop.SaveOrUpdateFormFn(form, row, urlParam);
            }
        }
    };
</script>